
---

## üöÄ Dynamic Domain Management in ASP.NET Core Web API

### üîß How It Works

This project demonstrates how to **dynamically manage frontend domains** accessing a centralized ASP.NET Core Web API using CORS and PostgreSQL.

---

### üê≥ Step 1: Run the Full Stack with Docker

Start the complete application stack using Docker Compose:

```bash
docker-compose up --build -d
```

This will spin up:

* **.NET Web API backend**
* **Angular frontend served on multiple ports**
* **PostgreSQL database for domain storage**

---

### üåê Step 2: Frontend Served on Multiple Domains

Once running, three different Angular frontend instances will be accessible at:

* [http://localhost:4200](http://localhost:4200)
* [http://localhost:4400](http://localhost:4400)
* [http://localhost:4240](http://localhost:4240)

All three share the same backend API but simulate access from **different domains**.

---

### üóÉÔ∏è Step 3: Domain Tracking in PostgreSQL

When any frontend sends its first request (e.g., login or API call), the backend:

1. Extracts the request‚Äôs `Origin` header.
2. Looks up that origin in the **`AllowedOrigins`** table in PostgreSQL.
3. If not found:

   * The origin is inserted with a status of `"Pending"`.
   * The request proceeds only if it‚Äôs a **public/unauthenticated endpoint**.
4. If the origin is found but:

   * **`Status = "Rejected"`** ‚Üí Request is blocked with **403 Forbidden**.
   * **`Status = "Approved"`** ‚Üí API proceeds and CORS headers are added dynamically.

---

### üõ†Ô∏è Step 4: Approve/Reject Domains Manually

Manually edit the domain statuses directly in the PostgreSQL database:

* Connect using any DB tool (e.g., pgAdmin or DBeaver).
* Navigate to the `AllowedOrigins` table.
* Update the `Status` field to:

  * `"Approved"` ‚Üí Domain is allowed to call secure APIs.
  * `"Rejected"` ‚Üí Domain requests are blocked with `403 Forbidden`.

> ‚úÖ DB credentials can be found in `appsettings.json`.

---

### üîê Step 5: Test Authentication Flow

After approving a domain:

1. Navigate to that domain (e.g., `http://localhost:4200`).
2. Send a login request.
3. Use the returned JWT token to access secure endpoints.

If the domain is **rejected**, any request to a protected endpoint will fail with:

```http
403 Forbidden - Access Denied: Origin is Rejected.
```

---

### ‚úÖ Summary

| Domain Status | Behavior                                    |
| ------------- | ------------------------------------------- |
| Pending       | Stored in DB, request allowed if public     |
| Approved      | CORS headers applied, secure API accessible |
| Rejected      | Request blocked with 403 Forbidden          |


Docs file :
https://docs.google.com/document/d/1nhUxNRDHRYEFovXWysGc4aOgxmhMX5gBticShyrsdCI/edit?usp=sharing
